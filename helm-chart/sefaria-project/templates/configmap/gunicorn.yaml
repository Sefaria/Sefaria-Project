apiVersion: v1
kind: ConfigMap
metadata:
  name: gunicorn-config-{{ .Values.deployEnv }}
  labels:
    deployEnv: "{{ .Values.deployEnv }}"
    {{- include "sefaria.labels" . | nindent 4 }}
data:
  gunicorn.conf.py: |-
    # args: [ "python manage.py migrate && gunicorn sefaria.wsgi --access-logfile - --error-logfile /log/gunicorn-error.log --timeout 300 --worker-class=gevent --worker-connection 2000 --worker-tmp-dir /dev/shm -b 0.0.0.0:80" ]
    # Todo:
    # - Add commandline arguments here
    # - configure logging

    import os
    import structlog
    import re

    {{- if .Values.instrumentation.enabled }}
    from opentelemetry import trace
    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
    from opentelemetry.sdk.resources import Resource
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor
    {{- end }}

    loglevel = "warning"
    
    {{- if .Values.instrumentation.enabled }}
    def post_fork(server, worker):
        server.log.info("Worker spawned (pid: %s)", worker.pid)
        from opentelemetry.instrumentation.auto_instrumentation import sitecustomize
    
    {{- end }}

    def combined_logformat(logger, name, event_dict):
        if event_dict.get('logger') == "gunicorn.access":
            message = event_dict['event']

            parts = [
                r'(?P<host>\S+)',  # host %h
                r'\S+',  # indent %l (unused)
                r'(?P<user>\S+)',  # user %u
                r'\[(?P<time>.+)\]',  # time %t
                r'"(?P<method>\S+)\s+(?P<path>\S+)\s+(?P<protocol>\S+)"',  # request "%r"
                r'(?P<status>[0-9]+)',  # status %>s
                r'(?P<size>\S+)',  # size %b (careful, can be '-')
                r'"(?P<referer>.*)"',  # referer "%{Referer}i"
                r'"(?P<agent>.*)"',  # user agent "%{User-agent}i"
            ]
            pattern = re.compile(r'\s+'.join(parts) + r'\s*\Z')
            m = pattern.match(message)
            res = m.groupdict()

            res["httpRequest"] = {
                "requestUrl": res["path"],
                "requestMethod": res["method"]
            }

            del res["path"]
            del res["method"]
            del res["protocol"]

            if res["user"] == "-":
                res["user"] = None

            res["status"] = int(res["status"])

            if res["size"] == "-":
                res["size"] = 0
            else:
                res["size"] = int(res["size"])

            if res["referer"] == "-":
                res["referer"] = None

            event_dict.update(res)

        return event_dict


    # this is duplicated from sefaria.system.logging
    def add_severity(logger, method_name, event_dict):
        """

        :param logger:
        :param method_name:
        :param event_dict:
        :return:
        """
        event_dict["severity"] = method_name

        return event_dict


    # --- Structlog logging initialisation code
    # Based on https://albersdevelopment.net/2019/08/15/using-structlog-with-gunicorn/

    pre_chain = [
        # Add the log level and a timestamp to the event_dict if the log entry
        # is not from structlog.
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        add_severity,
        combined_logformat
    ]


    logconfig_dict = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "json_formatter": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.JSONRenderer(),
                "foreign_pre_chain": pre_chain,
            }
        },
        "handlers": {
            "error_console": {
                "class": "logging.StreamHandler",
                "formatter": "json_formatter",
            },
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "json_formatter",
            },
        },
    }

    # #-------
    # # Logging variables
    # l_envName = os.getenv("ENV_NAME", "ENV_NAME not defined")
    # l_stackComponent = os.getenv("STACK_COMPONENT", "STACK_COMPONENT not defined")
    # # l_gitHash = os.getenv("Git")

    # def add_infra_data(logger, method_name, event_dict):
    #     additional_fields = {
    #         'envName': l_envName,
    #         'randomMsg': "My Name is Lorenzo",
    #         'stackComponent': l_stackComponent,
    #         'loggingConfigLocation': 'gunicorn.conf'
    #     }
    #     event_dict.update(additional_fields) #fix this
    #     return event_dict

    # structlog.configure(
    #     processors=[
    #         structlog.stdlib.filter_by_level,
    #         structlog.processors.TimeStamper(fmt="iso"),
    #         structlog.stdlib.add_logger_name,
    #         add_infra_data,
    #         structlog.stdlib.add_log_level,
    #         structlog.stdlib.PositionalArgumentsFormatter(),
    #         structlog.processors.StackInfoRenderer(),
    #         structlog.processors.format_exc_info,
    #         structlog.processors.UnicodeDecoder(),
    #         structlog.processors.ExceptionPrettyPrinter(),
    #         structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    #     ],
    #     context_class=structlog.threadlocal.wrap_dict(dict),
    #     logger_factory=structlog.stdlib.LoggerFactory(),
    #     wrapper_class=structlog.stdlib.BoundLogger,
    #     cache_logger_on_first_use=True,
    # )

