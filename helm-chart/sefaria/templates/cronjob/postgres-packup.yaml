{{- if eq .Values.backup.postgres.enabled true }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.deployEnv }}-postgresbackup
  labels:
    {{- include "sefaria.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Replace
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          serviceAccount: {{ .Values.backup.postgres.serviceAccount }}
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - postgres
                topologyKey: kubernetes.io/hostname
          tolerations:
            - key: schedule-on-database-vm
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
          initContainers:
          - name: postgres-dumper
            image:  postgres:{{ .Values.backup.postgres.version }}
            envFrom:
            - secretRef:
                name: {{ .Values.secrets.localSettings.ref }}
            - configMapRef:
                name: local-settings-{{ .Values.deployEnv }}
            - secretRef:
                name: local-settings-secrets-{{ .Values.deployEnv }}
                optional: true
            volumeMounts:
            - name: shared-volume
              mountPath: /pgdumps/shared_volume
            - name: create-dumps-script
              mountPath: /scripts/create-dumps.sh
              subPath: create-dumps.sh
              readOnly: true
            command: ["bash"]
            args: ["-c", "/scripts/create-dumps.sh"]
            resources:
              limits:
                memory: "500Mi"
          containers:
          - name: pgdump-uploader
            image:  google/cloud-sdk
            volumeMounts:
            - name: shared-volume
              mountPath: /pgdumps/shared_volume
            - name: upload-dumps-script
              mountPath: /scripts/upload-dumps.sh
              subPath: upload-dumps.sh
              readOnly: true
            env:
            - name: PREFIX
              value: {{ .Values.backup.postgres.prefix }}
            - name: BUCKET
              value: {{ .Values.backup.postgres.bucket }}
            - name: ARCHIVE_BUCKET
              value: {{ .Values.backup.postgres.archiveBucket }}
            - name: SLACK_URL
              valueFrom:
                secretKeyRef:
                  name: {{ template "sefaria.secrets.slackWebhook" . }}
                  key: slack-webhook
            command: ["bash"]
            args: ["-c", "/scripts/upload-dumps.sh"]
            resources:
              limits:
                memory: "500Mi"
          restartPolicy: OnFailure
          volumes:
          - name: create-dumps-script
            configMap:
              name: create-pg-dumps-{{ .Values.deployEnv }}
              defaultMode: 0755
          - name: upload-dumps-script
            configMap:
              name: upload-pg-dumps-{{ .Values.deployEnv }}
              defaultMode: 0755
          - name: shared-volume
            emptyDir: {}
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
{{- end }}
