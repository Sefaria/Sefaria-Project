{{- if .Values.linker.enabled }}
---
# apiVersion: apps/v1
# kind: Deployment
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.deployEnv }}-linker
  labels:
    deployEnv: "{{ .Values.deployEnv }}"
    app: linker-{{ .Values.deployEnv }}
    # releaseRevision: "{{ .Release.Revision }}"
  annotations:
    rollout.argoproj.io/revision: "{{ .Release.Revision }}"
spec:
  strategy:
    blueGreen:
      activeService: linker-{{ .Values.deployEnv }}
      autoPromotionEnabled: true
      prePromotionAnalysis:
        templates:
          # - templateName: rollout-readiness-{{ .Values.deployEnv }}
          - templateName: rollout-ready-{{ .Values.deployEnv }}
        args:
          - name: healthcheck-hostname
            value: "nginx-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
  selector:
    matchLabels:
      app: linker-{{ .Values.deployEnv }}
      # releaseRevision: "{{ .Release.Revision }}"
  revisionHistoryLimit: 1
  replicas: {{ .Values.linker.replicaCount }}
  progressDeadlineSeconds: 1200
  template:
    metadata:
      labels:
        app: linker-{{ .Values.deployEnv }}
        tier: application
        deployEnv: "{{ .Values.deployEnv }}"
        stackRole: django
        releaseRevision: "{{ .Release.Revision }}"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - mongo
            topologyKey: kubernetes.io/hostname
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "linker-{{ .Values.deployEnv }}"
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          {{- include "sefaria.nodeAffinities" . | nindent 10 }}
      tolerations: {{ toYaml .Values.linker.tolerations | nindent 8 }}
      serviceAccountName: "{{ .Values.linker.serviceAccount }}"
      containers:
      - name: linker
        image: "{{ .Values.linker.containerImage.imageRegistry }}:{{ .Values.linker.containerImage.tag }}"
        imagePullPolicy: Always
        args: [ "python manage.py migrate && gunicorn sefaria.wsgi --access-logfile - --error-logfile - --timeout 300 --threads {{ .Values.linker.resources.web.gunicornThreadCount }} --worker-tmp-dir /dev/shm -b 0.0.0.0:80" ]
        env:
          # WEB_CONCURRENCY is used for determining the number of server workers
          - name: WEB_CONCURRENCY
            value: "{{ .Values.linker.resources.web.gunicornWorkerCount }}"
          - name: randomstringtoforceredeployments
            value: {{ randAlphaNum 8 }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /app/logging-secret.json
          - name: ENV_NAME
            value: "{{ .Values.deployEnv }}"
          - name: STACK_COMPONENT
            value: web
          - name: REDIS_HOST
            value: "redis-{{ .Values.deployEnv }}"
          - name: NODEJS_HOST
            value: "node-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
          - name: VARNISH_HOST
            value: "varnish-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
          - name: HELM_REVISION
            value: "{{ .Release.Revision }}"
          - name: ENABLE_LINKER
            value: "True"
          - name: DISABLE_AUTOCOMPLETER
            value: "True"
          - name: RAW_REF_MODEL_BY_LANG_FILEPATH
            value: '{{ toJson .Values.linker.model_paths }}'
          - name: RAW_REF_PART_MODEL_BY_LANG_FILEPATH
            value: '{{ toJson .Values.linker.part_model_paths }}'
        envFrom:
          - secretRef:
              name: {{ .Values.secrets.localSettings.ref }}
              optional: true
          - configMapRef:
              name: local-settings-{{ .Values.deployEnv }}
          - secretRef:
              name: local-settings-secrets-{{ .Values.deployEnv }}
              optional: true
          - configMapRef:
              name: local-settings-linker-{{ .Values.deployEnv }}
              optional: true
          - secretRef:
              name: local-settings-linker-secrets-{{ .Values.deployEnv }}
              optional: true
        ports:
          - containerPort: 80
            protocol: TCP
        resources: {{ toYaml .Values.linker.resources.web.resources | nindent 10 }}
        # set failure thresholds
        startupProbe:
          httpGet:
            path: /healthz-rollout
            port: 80
          failureThreshold: 40 # 40 attempts x 15 seconds = 10 minutes for the pod to successfully start
          periodSeconds: 15
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          # initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 60
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          # initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 60
        volumeMounts:
        # https://stackoverflow.com/questions/53491603/kubernetes-volumemounts-a-file-not-a-directory
        - mountPath: /app/sefaria/local_settings.py
          name: local-settings
          subPath: local_settings.py
          readOnly: true
        - mountPath: /varnish-secret
          name: varnish-secret
          readOnly: true
        - mountPath: /school-lookup-data
          name: school-lookup-data
          readOnly: true
        - mountPath: /client-secret
          name: client-secret
          readOnly: true
        #TODO: what is this used for?  Is it needed? There's no env var pointing to this location
        - mountPath: /google-cloud-secret
          name: backup-manager-secret
          readOnly: true
        - mountPath: /app/logging-secret.json
          name: logging-secret
          subPath: logging-secret.json
          readOnly: true
        - name: gunicorn-config
          mountPath: /app/gunicorn.conf.py
          subPath: gunicorn.conf.py
          readOnly: true
      volumes:
        - name:  local-settings
          configMap:
            name: local-settings-file-{{ .Values.deployEnv }}
            items:
              - key: local_settings.py
                path: local_settings.py
        - name: client-secret
          secret:
            secretName: {{ template "sefaria.secrets.googleClient" . }} # needs to be checked if it's a reference object or the data object we created.
        - name: backup-manager-secret  # used to access google cloud
          secret:
            secretName: {{ template "sefaria.secrets.backupManager" . }}
        - name: logging-secret
          secret:
            secretName: {{ template "sefaria.secrets.logging" . }}
            optional: true
        - name: varnish-secret
          secret:
            secretName: {{ template "sefaria.secrets.varnish" . }}
        - name: school-lookup-data
          secret:
            secretName: {{ template "sefaria.secrets.schoolLookup" . }}
            optional: true
        - name: gunicorn-config
          configMap:
            name: gunicorn-config-{{ .Values.deployEnv }}
{{- end }}
