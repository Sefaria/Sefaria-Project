# Singleton deployment for the monitor.
# No service needed
# apiVersion: apps/v1
# kind: Deployment
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.deployEnv }}-monitor
  labels:
    deployEnv: "{{ .Values.deployEnv }}"
  annotations:
    rollout.argoproj.io/revision: "{{ .Release.Revision }}"
spec:
  strategy:
    blueGreen:
      activeService: monitor-{{ .Values.deployEnv }}
      autoPromotionEnabled: true
      prePromotionAnalysis:
        templates:
          # - templateName: rollout-readiness-{{ .Values.deployEnv }}
          - templateName: rollout-ready-{{ .Values.deployEnv }}
        args:
          # - name: rollout-value
          #   value: "{{ .Release.Revision }}"
          # - name: deploy-env
          #   value: "{{ .Values.deployEnv }}"
          - name: healthcheck-hostname
            value: "nginx-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
  selector:
    matchLabels:
      app: monitor-{{ .Values.deployEnv }}
  replicas: {{ .Values.monitor.replicaCount }}
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: monitor-{{ .Values.deployEnv }}
        tier: application-{{ .Values.deployEnv }}
        deployEnv: {{ .Values.deployEnv | quote }}
        stackRole: monitor
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app-{{ .Values.deployEnv }}
                operator: In
                values:
                - mongo
            topologyKey: kubernetes.io.hostname
        nodeAffinity:
          {{- include "sefaria.nodeAffinities" . | nindent 10 }}
      containers:
      - name: monitor
        image: "{{ .Values.monitor.containerImage.imageRegistry }}:{{ .Values.monitor.containerImage.tag }}"
        imagePullPolicy: Always
        args: [ "mkdir -p /log && touch /log/sefaria_book_errors.log && python multiserver-monitor.py" ]
        env:
          - name: randomstringtoforceredeployments
            value: {{ randAlphaNum 8 }}
          - name: REDIS_HOST
            value: "redis-{{ .Values.deployEnv }}"
          - name: NODEJS_HOST
            value: "node-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
          - name: VARNISH_HOST
            value: "varnish-{{ .Values.deployEnv }}-{{ .Release.Revision }}"
        envFrom:
          - secretRef:
              name: {{ .Values.secrets.localSettings.ref }}
              optional: true
          - configMapRef:
              name: local-settings-{{ .Values.deployEnv }}
          - secretRef:
              name: local-settings-secrets-{{ .Values.deployEnv }}
              optional: true
          - configMapRef:
              name: local-settings-monitor-{{ .Values.deployEnv }}
              optional: true
          - secretRef:
              name: local-settings-monitor-secrets-{{ .Values.deployEnv }}
              optional: true
        resources: {{ toYaml .Values.monitor.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /app/sefaria/local_settings.py
          name: local-settings
          readOnly: true
          subPath: local_settings.py
        - mountPath: /varnish-secret
          name: varnish-secret
          readOnly: true
      volumes:
        - name:  local-settings
          configMap:
            name: local-settings-file-{{ .Values.deployEnv }}
            items:
              - key: local_settings.py
                path: local_settings.py
        - name: varnish-secret
          secret:
            secretName: {{ template "sefaria.secrets.varnish" . }}
